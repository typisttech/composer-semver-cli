name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  phar:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          coverage: none
          tools: box:4
      - uses: ramsey/composer-install@v3
        with:
          composer-options: --no-dev --prefer-dist

      - run: box compile

      - uses: actions/upload-artifact@v4
        with:
          name: composer-semver.phar
          path: phar/composer-semver
          if-no-files-found: error

  build:
    needs: phar
    strategy:
      matrix:
        runs-on:
          - ubuntu-24.04-arm
          - ubuntu-24.04
          - macos-15
          - macos-15-intel
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Set environment variables
        run: |
          OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
          ARCH="$(uname -m)"
          test "${ARCH}" = "aarch64" && ARCH="arm64"
          test "${ARCH}" = "x86_64" && ARCH="amd64"

          echo "OS=${OS}" >> $GITHUB_ENV
          echo "ARCH=${ARCH}" >> $GITHUB_ENV
      - name: Set spc environment variables
        run: |
          test "${OS}" = "darwin" && SPC_OS="macos" || SPC_OS="${OS}"
          test "${ARCH}" = "arm64" && SPC_ARCH="aarch64" || SPC_ARCH="x86_64"

          echo "SPC_OS=${SPC_OS}" >> $GITHUB_ENV
          echo "SPC_ARCH=${SPC_ARCH}" >> $GITHUB_ENV

      - name: Download spc
        run: |
          gh release download --repo crazywhalecc/static-php-cli --pattern "${PATTERN}" --output spc.tar.gz && \
          mkdir -p /tmp/spc && \
          tar -xzvf spc.tar.gz --directory /tmp/spc && \
          echo "/tmp/spc" >> "$GITHUB_PATH"
        env:
          PATTERN: spc-${{ env.SPC_OS }}-${{ env.SPC_ARCH }}.tar.gz
          GH_TOKEN: ${{ github.token }}

      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            craft.yml
          sparse-checkout-cone-mode: false
      - uses: actions/download-artifact@v5
        with:
          name: composer-semver.phar
          path: phar

      - run: spc craft
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: mkdir -p out
      - run: spc micro:combine phar/composer-semver --output out/composer-semver

      - uses: actions/upload-artifact@v4
        with:
          name: composer-semver_${{ env.OS }}_${{ env.ARCH }}
          path: out/composer-semver
          if-no-files-found: error

  nfpm:
    needs: build
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        arch:
          - arm64
          - amd64
    steps:
      - name: Set environment variables
        run: echo "SEMVER=${TAG#v}" >> $GITHUB_ENV
        env:
          TAG: ${{ github.ref_name }}
        if: github.ref_type == 'tag'

      - name: Download nfpm
        run: gh release download --repo goreleaser/nfpm --pattern 'nfpm_*_arm64.deb' --output nfpm.deb
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Install nfpm
        run: sudo dpkg -i nfpm.deb

      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            nfpm.yaml
            README.md
            LICENSE
          sparse-checkout-cone-mode: false
      - uses: actions/download-artifact@v5
        with:
          pattern: composer-semver_linux_${{ matrix.arch }}
          path: dist

      - run: ls -R dist # TODO!
      - run: ls -R . # TODO!

      - run: mkdir -p deb
      - run: nfpm package --packager deb --target "${TARGET}"
        env:
          ARCH: ${{ matrix.arch }}
          DIST_DIR: dist/composer-semver_linux_${{ matrix.arch }}
          VERSION: ${{ env.SEMVER || format('0.0.0-{0}+{1}', github.run_number, github.sha) }}
          TARGET: deb/composer-semver_linux_${{ matrix.arch }}.deb

      - uses: actions/upload-artifact@v4
        with:
          name: composer-semver_${{ matrix.arch }}.deb
          path: deb/composer-semver_linux_${{ matrix.arch }}.deb
          if-no-files-found: error

  test-linux:
    needs: nfpm
    strategy:
      matrix:
        runs-on:
          - ubuntu-24.04-arm
          - ubuntu-24.04
    runs-on: ${{ matrix.runs-on }}
    env:
      GOFLAGS: '-mod=mod'
    steps:
      - name: Set environment variables
        run: |
          ARCH="$(uname -m)"
          test "${ARCH}" = "aarch64" && ARCH="arm64"
          test "${ARCH}" = "x86_64" && ARCH="amd64"

          echo "ARCH=${ARCH}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v5
        with:
          name: composer-semver_${{ env.ARCH }}.deb
          path: deb
      - run: sudo dpkg -i "${DEB}"
        env:
          DEB: deb/composer-semver_linux_${{ env.ARCH }}.deb

      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'

      - name: Print composer-semver binary path
        run: go test -count=1 -v ./internal

      - run: go test -count=1 ./...

  test-darwin:
    needs: build
    strategy:
      matrix:
        runs-on:
          - macos-15
          - macos-15-intel
    runs-on: ${{ matrix.runs-on }}
    env:
      GOFLAGS: '-mod=mod'
    steps:
      - name: Set environment variables
        run: |
          ARCH="$(uname -m)"
          test "${ARCH}" = "aarch64" && ARCH="arm64"
          test "${ARCH}" = "x86_64" && ARCH="amd64"

          echo "ARCH=${ARCH}" >> $GITHUB_ENV

      - uses: actions/checkout@v5

      - uses: actions/download-artifact@v5
        with:
          name: composer-semver_darwin_${{ env.ARCH }}
          path: out
      - run: |
          echo "${WORKSPACE}/out" >> "$GITHUB_PATH" && \
          chmod +x out/composer-semver
        env:
          WORKSPACE: ${{ github.workspace }}

      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'

      - name: Print composer-semver binary path
        run: go test -count=1 -v ./internal

      - run: go test -count=1 ./...

  dispatch:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs:
      - test-linux
      - test-darwin
    runs-on: ubuntu-24.04-arm
    steps:
      - run: |
          gh workflow run publish.yml \
          --ref "${REF}" \
          -f version="${VERSION}" \
          -f run_id="${RUN_ID}"

        env:
          REF: ${{ github.ref }}
          VERSION: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}
          GH_TOKEN: ${{ github.token }}
