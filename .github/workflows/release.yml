name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Git tag for the release. For example, v1.2.3'
        required: true
      run_id:
        description: 'ID of the CI workflow run that created the release assets'
        type: number
        required: true
      clobber:
        description: 'Overwrite existing assets of the same name'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ inputs.version }}
  cancel-in-progress: true

permissions: {}

jobs:
  drafter:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: release-drafter/release-drafter@v6
        with:
          version: ${{ inputs.version }}
          tag: ${{ inputs.version }}
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deb:
    needs: drafter
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      contents: write
      actions: read
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: deb
          path: deb
          run-id: ${{ inputs.run_id }}
          github-token: ${{ github.token }}

      - run: ls -R . # TODO!

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: deb/*.deb

      - name: Upload debs
        run: |
          while IFS= read -u3 -r -d '' deb; do 
            echo "::group::==> ${deb}"
            gh release upload ${CLOBBER} --repo "${REPO}" "${TAG}" "${deb}"
            echo "::endgroup::"
          done 3< <(find deb -type f -name '*.deb' -print0)
        env:
          CLOBBER: ${{ inputs.clobber && '--clobber' || '' }}
          REPO: ${{ github.repository }}
          TAG: ${{ inputs.version }}
          GH_TOKEN: ${{ github.token }}

  tarball:
    needs: drafter
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      contents: write
      actions: read
    steps:
      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            README.md
            LICENSE
          sparse-checkout-cone-mode: false
          ref: ${{ inputs.version }}

      - uses: actions/download-artifact@v5
        with:
          pattern: composer-semver_*_*
          path: bin
          run-id: ${{ inputs.run_id }}
          github-token: ${{ github.token }}

      - name: Find binaries
        run: |
          declare -a bin_dirs
  
          while IFS= read -u3 -r -d '' full_bin_path; do
            echo "::group::==> ${full_bin_path}"
            full_dir=$(dirname "${full_bin_path}")
            dir=$(basename -a "${full_dir}")
            IFS= bin_dirs+=($dir)
            echo "::endgroup::"
          done 3< <(find bin -maxdepth 2 -mindepth 2 -type f -name 'composer-semver' -print0)

          echo BIN_DIRS=$(IFS=:; echo "${bin_dirs[@]}") >> "$GITHUB_ENV"

      - run: |
          echo "Found directories: ${BIN_DIRS[@]}"

      - run: mkdir -p tarball

      - name: Create tarballs
        run: |
          IFS=: for bin_dir in ${BIN_DIRS[@]}; do
            echo "::group::==> ${bin_dir}"
            cp README.md LICENSE "bin/${bin_dir}/"
            chmod +x "bin/${bin_dir}/composer-semver" && \
            tar -C "bin/${bin_dir}" -cvf - composer-semver README.md LICENSE | \
            gzip --best - > "tarball/${bin_dir}.tar.gz"
            echo "::endgroup::"
          done

      # TODO!
      - run: echo "aaa" >> tarball/composer-semver_Linux_amd64.tar.gz

      - name: Validate tarballs
        run: |
          for bin_dir in ${BIN_DIRS[@]}; do
            echo "::group::==> ${bin_dir}"
            tar -ztf "tarball/${bin_dir}.tar.gz"
            echo "::endgroup::"
          done

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: tarball/*.tar.gz

      - name: Upload tarballs
        run: |
          for bin_dir in ${BIN_DIRS[@]}; do
            echo "::group::==> ${bin_dir}"
            gh release upload ${CLOBBER} --repo "${REPO}" "${TAG}" "tarball/${bin_dir}.tar.gz"
            echo "::endgroup::"
          done
        env:
          CLOBBER: ${{ inputs.clobber && '--clobber' || '' }}
          REPO: ${{ github.repository }}
          TAG: ${{ inputs.version }}
          GH_TOKEN: ${{ github.token }}
