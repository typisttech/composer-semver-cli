name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Git tag for the release. For example, v1.2.3'
        required: true
      run_id:
        description: 'ID of the CI workflow run that created the release assets'
        type: number
        required: true
      clobber:
        description: 'Overwrite existing assets of the same name'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ inputs.version }}
  cancel-in-progress: true

permissions: {}

jobs:
  drafter:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: release-drafter/release-drafter@v6
        with:
          version: ${{ inputs.version }}
          tag: ${{ inputs.version }}
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deb:
    needs: drafter
    runs-on: ubuntu-24.04-arm
    permissions:
      id-token: write
      attestations: write
      contents: write
      actions: read
    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: '*.deb'
          path: deb
          run-id: ${{ inputs.run_id }}
          github-token: ${{ github.token }}

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: deb/*.deb

      - run: |
          DEBS=$(find deb -type f -name '*.deb')
          for DEB in ${DEBS}; do
            gh release upload ${CLOBBER} --repo "${REPO}" "${TAG}" "${DEB}"
          done
        env:
          CLOBBER: ${{ inputs.clobber && '--clobber' || '' }}
          REPO: ${{ github.repository }}
          TAG: ${{ inputs.version }}
          GH_TOKEN: ${{ github.token }}

  tarball:
    needs: drafter
    runs-on: ubuntu-24.04-arm
    permissions:
      id-token: write
      attestations: write
      contents: write
      actions: read
    strategy:
      matrix:
        os:
          - darwin
          - linux
        arch:
          - arm64
          - amd64
    steps:
      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            README.md
            LICENSE
          sparse-checkout-cone-mode: false
          ref: ${{ inputs.version }}

      - uses: actions/download-artifact@v5
        with:
          pattern: composer-semver_*_*
          path: bin
          run-id: ${{ inputs.run_id }}
          github-token: ${{ github.token }}

      - run: ls -R bin # TODO!

      - run: |
          DIRS=$(find bin -maxdepth 2 -mindepth 2 -type f -name 'composer-semver' -print0 | \
          xargs -0P 0 -n1 -- dirname | \
          xargs -n1 -- basename)

          {
            echo 'DIRS<<EOF'
            echo "${DIRS}"
            echo EOF
          } >> "$GITHUB_ENV"

      - run: |
          mkdir -p tarball
          
          for DIR in ${DIRS}; do
            chmod +x "bin/${DIR}/composer-semver" && \
            tar -cvf - "bin/${DIR}/composer-semver" README.md LICENSE | \
            gzip --best - > "tarball/${DIR}.tar.gz"
          done

      - run: ls -R tarball # TODO!

        # TODO:
      - run: echo 'aaaa' >> tarball/composer-semver_linux_arm64.tar.gz

      - run: |
          for DIR in ${DIRS}; do
            tar -ztf "tarball/${DIR}.tar.gz"
          done

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: tarball/*.tar.gz
      - run: |
          for DIR in ${DIRS}; do
            gh release upload ${CLOBBER} --repo "${REPO}" "${TAG}" "tarball/${DIR}.tar.gz"
          done
        env:
          CLOBBER: ${{ inputs.clobber && '--clobber' || '' }}
          REPO: ${{ github.repository }}
          TAG: ${{ inputs.version }}
          GH_TOKEN: ${{ github.token }}
