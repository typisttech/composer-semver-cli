package main

import (
	"fmt"
	"os"
	"regexp"
	"text/template"

	"github.com/typisttech/composer-semver/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/normalize/fail_and_report_alias_issue/main.go"
# Test the "{{ .Name }}" case

exec composer-semver normalize '{{ .AliasSource }}'
stdout .
! stderr .

! exec composer-semver normalize --full-version='{{ .FullVersion }}' '{{ .Alias }}'
! stdout .
stderr '{{ .Output }}'
`

// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L215-L224
var cases = []data{
	{"Alias and caret", "1.0.0+foo as ^2.0"},
	{"Alias and tilde", "1.0.0+foo as  ~2.0"},
	{"Alias and greater than", "1.0.0+foo  as >2.0"},
	{"Alias and less than", "1.0.0+foo as <2.0"},
	{"Bad alias with stability", "1.0.0+foo@dev as <2.0@dev"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name        string
	FullVersion string
}

func (d data) Name() string {
	return d.name
}

var re = regexp.MustCompile(`^([^,\s#]+)(?:#[^ ]+)? +as +([^,\s]+)$`)

func (d data) AliasSource() string {
	m := re.FindAllStringSubmatch(d.FullVersion, 1)
	if len(m) != 1 || len(m[0]) != 3 {
		panic("Bad full version(" + d.name + "): " + d.FullVersion)
	}

	return m[0][1]
}

func (d data) Alias() string {
	m := re.FindAllStringSubmatch(d.FullVersion, 1)
	if len(m) != 1 || len(m[0]) != 3 {
		panic("Bad full version(" + d.name + "): " + d.FullVersion)
	}

	return m[0][2]
}

const errMsg = `[ERROR] Invalid version string "%s" in "%s", the alias must be an exact version`

func (d data) Output() string {
	s := fmt.Sprintf(errMsg, d.Alias(), d.FullVersion)
	q := regexp.QuoteMeta(s)
	return fmt.Sprintf(`^\s+%s\s+$`, q)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("normalize/fail_and_report_alias_issue", cases...)
	if err != nil {
		panic(err)
	}
}
