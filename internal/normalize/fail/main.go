package main

import (
	"fmt"
	"os"
	"regexp"
	"strings"
	"text/template"

	"github.com/typisttech/composer-semver/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/normalize/fail/main.go"
# Test the "{{ .Name }}" case

! exec composer-semver normalize '{{ .Input }}'
! stdout .
stderr '{{ .Output }}'
`

// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L162-L192
var cases = []data{
	{"empty", ""},
	{"invalid chars", "a"},
	{"invalid type", "1.0.0-meh"},
	{"too many bits", "1.0.0.0.0"},
	{"non-dev arbitrary", "feature-foo"},
	{"metadata w/ space", "1.0.0+foo bar"},
	{"maven style release", "1.0.1-SNAPSHOT"},
	{"dev with less than", "1.0.0<1.0.5-dev"},
	{"dev with less than/2", "1.0.0-dev<1.0.5-dev"},
	{"dev suffix with spaces", "foo bar-dev"},
	{"any with spaces", "1.0 .2"},
	{"no version, no alias", " as "},
	{"no version, only alias", " as 1.2"},
	{"just an operator", "^"},
	{"just an operator/2", "^8 || ^"},
	{"just an operator/3", "~"},
	{"just an operator/4", "~1 ~"},
	{"constraint", "~1"},
	{"constraint/2", "^1"},
	{"constraint/3", "1.*"},
	{"date versions with 4 bits", "20100102.0.3.4"},
	{"date versions with 4 bits/earliest year", "100000.0.0.0"},
	{"invalid CalVer (as MAJOR) versions/YYYYMMD", "2023013.0.0"},
	{"invalid CalVer (as MAJOR) versions/YYYYMMDDh", "202301311.0.0"},
	{"invalid CalVer (as MAJOR) versions/YYYYMMDDhhm", "20230131000.0.0"},
	{"invalid CalVer (as MAJOR) versions/YYYYMMDDhhmmX", "2023013100000.0.0"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name  string
	Input string
}

func (d data) Name() string {
	return d.name
}

const errMsg = `[ERROR] Invalid version string "%s"`

func (d data) Output() string {
	v := strings.Trim(d.Input, ` `)
	s := fmt.Sprintf(errMsg, v)
	q := regexp.QuoteMeta(s)
	return fmt.Sprintf(`^\s+%s\s+$`, q)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("normalize/fail", cases...)
	if err != nil {
		panic(err)
	}
}
