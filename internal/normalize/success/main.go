package main

import (
	"fmt"
	"os"
	"regexp"
	"text/template"

	"github.com/typisttech/composer-semver/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/normalize/success/main.go"
# Test the "{{ .Name }}" case

exec composer-semver normalize '{{ .Input }}'
stdout '{{ .Output }}'
! stderr .
`

// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L67-L146
var cases = []data{
	{"none", "1.0.0", "1.0.0.0"},
	{"none/2", "1.2.3.4", "1.2.3.4"},
	{"parses state", "1.0.0RC1dev", "1.0.0.0-RC1-dev"},
	{"CI parsing", "1.0.0-rC15-dev", "1.0.0.0-RC15-dev"},
	{"delimiters", "1.0.0.RC.15-dev", "1.0.0.0-RC15-dev"},
	{"RC uppercase", "1.0.0-rc1", "1.0.0.0-RC1"},
	{"patch replace", "1.0.0.pl3-dev", "1.0.0.0-patch3-dev"},
	{"forces w.x.y.z", "1.0-dev", "1.0.0.0-dev"},
	{"forces w.x.y.z/2", "0", "0.0.0.0"},
	{"forces w.x.y.z/maximum major", "99999", "99999.0.0.0"},
	{"parses long", "10.4.13-beta", "10.4.13.0-beta"},
	{"parses long/2", "10.4.13beta2", "10.4.13.0-beta2"},
	{"parses long/semver", "10.4.13beta.2", "10.4.13.0-beta2"},
	{"parses long/semver2", "v1.13.11-beta.0", "1.13.11.0-beta0"},
	{"parses long/semver3", "1.13.11.0-beta0", "1.13.11.0-beta0"},
	{"expand shorthand", "10.4.13-b", "10.4.13.0-beta"},
	{"expand shorthand/2", "10.4.13-b5", "10.4.13.0-beta5"},
	{"strips leading v", "v1.0.0", "1.0.0.0"},
	{"parses dates y-m as classical", "2010.01", "2010.01.0.0"},
	{"parses dates w/ . as classical", "2010.01.02", "2010.01.02.0"},
	{"parses dates y.m.Y as classical", "2010.1.555", "2010.1.555.0"},
	{"parses dates y.m.Y/2 as classical", "2010.10.200", "2010.10.200.0"},
	{"parses CalVer YYYYMMDD (as MAJOR) versions", "20230131.0.0", "20230131.0.0"},
	{"parses CalVer YYYYMMDDhhmm (as MAJOR) versions", "202301310000.0.0", "202301310000.0.0"},
	{"strips v/datetime", "v20100102", "20100102"},
	{"parses dates no delimiter", "20100102", "20100102"},
	{"parses dates no delimiter/2", "20100102.0", "20100102.0"},
	{"parses dates no delimiter/3", "20100102.1.0", "20100102.1.0"},
	{"parses dates no delimiter/4", "20100102.0.3", "20100102.0.3"},
	{"parses dates no delimiter/earliest year", "100000", "100000"},
	{"parses dates w/ - and .", "2010-01-02-10-20-30.0.3", "2010.01.02.10.20.30.0.3"},
	{"parses dates w/ - and ./2", "2010-01-02-10-20-30.5", "2010.01.02.10.20.30.5"},
	{"parses dates w/ -", "2010-01-02", "2010.01.02"},
	{"parses dates w/ .", "2012.06.07", "2012.06.07.0"},
	{"parses numbers", "2010-01-02.5", "2010.01.02.5"},
	{"parses dates y.m.Y", "2010.1.555", "2010.1.555.0"},
	{"parses datetime", "20100102-203040", "20100102.203040"},
	{"parses date dev", "20100102.x-dev", "20100102.9999999.9999999.9999999-dev"},
	{"parses datetime dev", "20100102.203040.x-dev", "20100102.203040.9999999.9999999-dev"},
	{"parses dt+number", "20100102203040-10", "20100102203040.10"},
	{"parses dt+patch", "20100102-203040-p1", "20100102.203040-patch1"},
	{"parses dt Ym", "201903.0", "201903.0"},
	{"parses dt Ym dev", "201903.x-dev", "201903.9999999.9999999.9999999-dev"},
	{"parses dt Ym+patch", "201903.0-p2", "201903.0-patch2"},
	{"parses master", "dev-master", "dev-master"},
	{"parses master w/o dev", "master", "dev-master"},
	{"parses trunk", "dev-trunk", "dev-trunk"},
	{"parses branches", "1.x-dev", "1.9999999.9999999.9999999-dev"},
	{"parses arbitrary", "dev-feature-foo", "dev-feature-foo"},
	{"parses arbitrary/2", "DEV-FOOBAR", "dev-FOOBAR"},
	{"parses arbitrary/3", "dev-feature/foo", "dev-feature/foo"},
	{"parses arbitrary/4", "dev-feature+issue-1", "dev-feature+issue-1"},
	{"ignores aliases", "dev-master as 1.0.0", "dev-master"},
	{"ignores aliases/2", "dev-load-varnish-only-when-used as ^2.0", "dev-load-varnish-only-when-used"},
	{"ignores aliases/3", "dev-load-varnish-only-when-used@dev as ^2.0@dev", "dev-load-varnish-only-when-used"},
	{"ignores stability", "1.0.0+foo@dev", "1.0.0.0"},
	{"ignores stability/2", "dev-load-varnish-only-when-used@stable", "dev-load-varnish-only-when-used"},
	{"semver metadata/2", "1.0.0-beta.5+foo", "1.0.0.0-beta5"},
	{"semver metadata/3", "1.0.0+foo", "1.0.0.0"},
	{"semver metadata/4", "1.0.0-alpha.3.1+foo", "1.0.0.0-alpha3.1"},
	{"semver metadata/5", "1.0.0-alpha2.1+foo", "1.0.0.0-alpha2.1"},
	{"semver metadata/6", "1.0.0-alpha-2.1-3+foo", "1.0.0.0-alpha2.1-3"},
	{"metadata w/ alias", "1.0.0+foo as 2.0", "1.0.0.0"},
	{"keep zero-padding", "00.01.03.04", "00.01.03.04"},
	{"keep zero-padding/2", "000.001.003.004", "000.001.003.004"},
	{"keep zero-padding/3", "0.000.103.204", "0.000.103.204"},
	{"keep zero-padding/4", "0700", "0700.0.0.0"},
	{"keep zero-padding/5", "041.x-dev", "041.9999999.9999999.9999999-dev"},
	{"keep zero-padding/6", "dev-041.003", "dev-041.003"},
	{"dev with mad name", "dev-1.0.0-dev<1.0.5-dev", "dev-1.0.0-dev<1.0.5-dev"},
	{"dev prefix with spaces", "dev-foo bar", "dev-foo bar"},
	{"space padding", " 1.0.0", "1.0.0.0"},
	{"space padding/2", "1.0.0 ", "1.0.0.0"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name      string
	Input     string
	rawOutput string
}

func (d data) Name() string {
	return d.name
}

func (d data) Output() string {
	q := regexp.QuoteMeta(d.rawOutput)
	return fmt.Sprintf(`^%s$`, q)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("normalize/success", cases...)
	if err != nil {
		panic(err)
	}
}
