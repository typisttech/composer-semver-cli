package main

import (
	"fmt"
	"os"
	"regexp"
	"text/template"

	"github.com/typisttech/composer-semver-cli/internal"
)

const fileTemplateRaw = `# Test the "{{ .Name }}" case
# This file is generated by "internal/parse/fails_on_bad_reference/main.go"
# DO NOT EDIT THIS FILE.

! exec composer-semver parse '{{ .Input }}'
! stdout .
stderr '{{ .Output }}'
`

var cases = []data{
	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L310-L317
	{"1", "1.0#abcd123", "== 1.0.0.0"},
	{"2", "1.0#trunk/@123", "== 1.0.0.0"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name      string
	Input     string
	rawOutput string
}

func (d data) Name() string {
	return d.name
}

const errMsg = `[ERROR] Could not parse version constraint %s: Invalid version string "%s"`

func (d data) Output() string {
	s := fmt.Sprintf(errMsg, d.Input, d.Input)
	q := regexp.QuoteMeta(s)
	return fmt.Sprintf(`\s+%s\s+`, q)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("parse/fails_on_bad_reference", cases...)
	if err != nil {
		panic(err)
	}
}
