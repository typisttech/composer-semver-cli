package main

import (
	"fmt"
	"os"
	"regexp"
	"strings"
	"text/template"

	"github.com/typisttech/composer-semver/internal"
)

const fileTemplateRaw = `# DO NOT EDIT THIS FILE
# This file is generated by "internal/parse/fail/main.go"
# Test the "{{ .Name }}" case

! exec composer-semver parse '{{ .Input }}'
! stdout .
stderr '{{ .Output }}'
`

var cases = []data{
	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L310-L317
	{"bad reference/1", "1.0#abcd123", "1.0#abcd123", "1.0#abcd123"},
	{"bad reference/2", "1.0#trunk/@123", "1.0#trunk/@123", "1.0#trunk/@123"},

	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L733-L776
	{"empty", "", "", ""},
	{"invalid version", "1.0.0-meh", "1.0.0-meh", "1.0.0-meh"},
	{"operator abuse", ">2.0,,<=3.0", ">2.0,,<=3.0", "2.0,,<=3.0"},
	{"operator abuse/2", ">2.0 ,, <=3.0", ">2.0 ,, <=3.0", "2.0 ,, <=3.0"},
	{"operator abuse/3", ">2.0 ||| <=3.0", "", ""},
	{"leading operator", ",^1@dev || ^4@dev", ",^1@dev", ",^1@dev"},
	{"leading operator/2", ",^1@dev", ",^1@dev", ",^1@dev"},
	{"leading operator/3", "|| ^1@dev", "", ""},
	{"trailing operator", "^1@dev ||", "", ""},
	{"trailing operator/2", "^1@dev ,", "^1@dev ,", "^1@dev ,"},
	{"caret+wildcard w/o -dev", "^2.0.*", "^2.0.*", "^2.0.*"},
	{"caret+wildcard w/o -dev/2", "^2.0.x", "^2.0.x", "^2.0.x"},
	{"caret+wildcard w/o -dev/3", "^2.0.x-beta", "^2.0.x-beta", "^2.0.x-beta"},
	{"caret+wildcard w/o -dev/4", "^2.*", "^2.*", "^2.*"},
	{"caret+wildcard w/o -dev/5", "^2.x", "^2.x", "^2.x"},
	{"caret+wildcard w/o -dev/6", "^2.x-beta", "^2.x-beta", "^2.x-beta"},
	{"caret+wildcard w/o -dev/7", "^2.1.2.*", "^2.1.2.*", "^2.1.2.*"},
	{"caret+wildcard w/o -dev/8", "^2.1.2.x", "^2.1.2.x", "^2.1.2.x"},
	{"caret+wildcard w/o -dev/9", "^2.1.2.x-beta", "^2.1.2.x-beta", "^2.1.2.x-beta"},
	{"tilde+wildcard w/o -dev", "~2.0.*", "~2.0.*", "~2.0.*"},
	{"tilde+wildcard w/o -dev/2", "~2.0.x", "~2.0.x", "~2.0.x"},
	{"tilde+wildcard w/o -dev/3", "~2.0.x-beta", "~2.0.x-beta", "~2.0.x-beta"},
	{"tilde+wildcard w/o -dev/4", "~2.*", "~2.*", "~2.*"},
	{"tilde+wildcard w/o -dev/5", "~2.x", "~2.x", "~2.x"},
	{"tilde+wildcard w/o -dev/6", "~2.x-beta", "~2.x-beta", "~2.x-beta"},
	{"tilde+wildcard w/o -dev/7", "~2.1.2.*", "~2.1.2.*", "~2.1.2.*"},
	{"tilde+wildcard w/o -dev/8", "~2.1.2.x", "~2.1.2.x", "~2.1.2.x"},
	{"tilde+wildcard w/o -dev/9", "~2.1.2.x-beta", "~2.1.2.x-beta", "~2.1.2.x-beta"},
	{"dash range with wildcard", "1.x - 2.*", "1.x - 2.*", "1.x - 2.*"},
	{"dash range with wildcards", "2.x.x.x-dev - 3.x.x.x-dev", "2.x.x.x-dev - 3.x.x.x-dev", "2.x.x.x-dev - ###EOL### 3.x.x.x-dev"},
	{"broken constraint with dev suffix", "^1.*-beta-dev", "^1.*-beta-dev", "^1.*-beta-dev"},
	{"broken constraint with dev suffix/2", "^1. *-dev", "*-dev", "*-dev"},
	{"broken constraint with dev suffix/3", "~1.*-beta-dev", "~1.*-beta-dev", "~1.*-beta-dev"},
	{"dev suffix conversion only works on simple strings", "1.0.0-dev<1.0.5-dev", "1.0.0-dev<1.0.5-dev", "1.0.0-dev<1.0.5-dev"},
	{"dev suffix conversion only works on simple strings/2", "*-dev", "*-dev", "*-dev"},
	{"just an operator", "^", "^", "^"},
	{"just an operator/2", "^8 || ^", "^", "^"},
	{"just an operator/3", "~", "~", "~"},
	{"just an operator/4", "~1 ~", "~", "~"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name                 string
	Input                string
	rawVersionConstraint string
	rawVersionString     string
}

func (d data) Name() string {
	return d.name
}

const errMsg = `[ERROR] Could not parse version constraint %s: Invalid version string "%s"`

func (d data) Output() string {
	s := fmt.Sprintf(errMsg, d.rawVersionConstraint, d.rawVersionString)
	q := regexp.QuoteMeta(s)
	q = strings.ReplaceAll(q, " ###EOL### ", `\s+`)
	return fmt.Sprintf(`^\s+%s\s+$`, q)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("parse/fail", cases...)
	if err != nil {
		panic(err)
	}
}
