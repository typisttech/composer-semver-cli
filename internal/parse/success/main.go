package main

import (
	"fmt"
	"os"
	"regexp"
	"text/template"

	"github.com/typisttech/composer-semver-cli/internal"
)

const fileTemplateRaw = `# Test the "{{ .Name }}" case
# This file is generated by "internal/parse/success/main.go"
# DO NOT EDIT THIS FILE.

exec composer-semver parse '{{ .Input }}'
stdout '{{ .Output }}'
! stderr .
`

var cases = []data{
	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L292-L300
	{"ignore stability flag/1", "1.0@dev", "== 1.0.0.0"},
	{"ignore stability flag/2", ">=1.0@beta", ">= 1.0.0.0-beta"},
	{"ignore stability flag/3", "dev-load-varnish-only-when-used as ^2.0@dev", "== dev-load-varnish-only-when-used"},
	{"ignore stability flag/4", "dev-load-varnish-only-when-used@dev as ^2.0@dev", "== dev-load-varnish-only-when-used"},

	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L302-L308
	{"ignores reference on dev version/1", "1.0.x-dev#abcd123", "== 1.0.9999999.9999999-dev"},
	{"ignores reference on dev version/2", "1.0.x-dev#trunk/@123", "== 1.0.9999999.9999999-dev"},

	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L342-L377
	{"simple/match any", "*", "*"},
	{"simple/match any/v", "v*", ">= 0.0.0.0-dev"},
	{"simple/match any/2", "*.*", ">= 0.0.0.0-dev"},
	{"simple/match any/2v", "v*.*", ">= 0.0.0.0-dev"},
	{"simple/match any/3", "*.x.*", ">= 0.0.0.0-dev"},
	{"simple/match any/4", "x.X.x.*", ">= 0.0.0.0-dev"},
	{"simple/not equal", "<>1.0.0", "!= 1.0.0.0"},
	{"simple/not equal/2", "!=1.0.0", "!= 1.0.0.0"},
	{"simple/greater than", ">1.0.0", "> 1.0.0.0"},
	{"simple/lesser than", "<1.2.3.4", "< 1.2.3.4-dev"},
	{"simple/less/eq than", "<=1.2.3", "<= 1.2.3.0"},
	{"simple/great/eq than", ">=1.2.3", ">= 1.2.3.0-dev"},
	{"simple/equals", "=1.2.3", "== 1.2.3.0"},
	{"simple/double equals", "==1.2.3", "== 1.2.3.0"},
	{"simple/no op means eq", "1.2.3", "== 1.2.3.0"},
	{"simple/completes version", "=1.0", "== 1.0.0.0"},
	{"simple/shorthand beta", "1.2.3b5", "== 1.2.3.0-beta5"},
	{"simple/shorthand alpha", "1.2.3a1", "== 1.2.3.0-alpha1"},
	{"simple/shorthand patch", "1.2.3p1234", "== 1.2.3.0-patch1234"},
	{"simple/shorthand patch/2", "1.2.3pl1234", "== 1.2.3.0-patch1234"},
	{"simple/accepts spaces", ">= 1.2.3", ">= 1.2.3.0-dev"},
	{"simple/accepts spaces/2", "< 1.2.3", "< 1.2.3.0-dev"},
	{"simple/accepts spaces/3", "> 1.2.3", "> 1.2.3.0"},
	{"simple/accepts master", ">=dev-master", ">= dev-master"},
	{"simple/accepts master/2", "dev-master", "== dev-master"},
	{"simple/accepts arbitrary", "dev-feature-a", "== dev-feature-a"},
	{"simple/regression #550", "dev-some-fix", "== dev-some-fix"},
	{"simple/regression #935", "dev-CAPS", "== dev-CAPS"},
	{"simple/ignores aliases", "dev-master as 1.0.0", "== dev-master"},
	{"simple/lesser than override", "<1.2.3.4-stable", "< 1.2.3.4"},
	{"simple/great/eq than override", ">=1.2.3.4-stable", ">= 1.2.3.4"},

	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L401-L419
	{"wildcard/1", "v2.*", "[>= 2.0.0.0-dev < 3.0.0.0-dev]"},
	{"wildcard/2", "2.*.*", "[>= 2.0.0.0-dev < 3.0.0.0-dev]"},
	{"wildcard/3", "20.*", "[>= 20.0.0.0-dev < 21.0.0.0-dev]"},
	{"wildcard/4", "20.*.*", "[>= 20.0.0.0-dev < 21.0.0.0-dev]"},
	{"wildcard/5", "2.0.*", "[>= 2.0.0.0-dev < 2.1.0.0-dev]"},
	{"wildcard/6", "2.x", "[>= 2.0.0.0-dev < 3.0.0.0-dev]"},
	{"wildcard/7", "2.x.x", "[>= 2.0.0.0-dev < 3.0.0.0-dev]"},
	{"wildcard/8", "2.2.x", "[>= 2.2.0.0-dev < 2.3.0.0-dev]"},
	{"wildcard/9", "2.10.X", "[>= 2.10.0.0-dev < 2.11.0.0-dev]"},
	{"wildcard/10", "2.1.3.*", "[>= 2.1.3.0-dev < 2.1.4.0-dev]"},
	{"wildcard/11", "0.*", "< 1.0.0.0-dev"},
	{"wildcard/12", "0.*.*", "< 1.0.0.0-dev"},
	{"wildcard/13", "0.x", "< 1.0.0.0-dev"},
	{"wildcard/14", "0.x.x", "< 1.0.0.0-dev"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name      string
	Input     string
	rawOutput string
}

func (d data) Name() string {
	return d.name
}

func (d data) Output() string {
	q := regexp.QuoteMeta(d.rawOutput)
	return fmt.Sprintf(`^%s$`, q)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("parse/success", cases...)
	if err != nil {
		panic(err)
	}
}
