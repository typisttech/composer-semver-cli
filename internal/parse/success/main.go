package main

import (
	"os"
	"regexp"
	"text/template"

	"github.com/typisttech/composer-semver-cli/internal"
)

const fileTemplateRaw = `# Test the "{{ .Name }}" case
# This file is generated by "internal/parse/success/main.go"
# DO NOT EDIT THIS FILE.

exec composer-semver parse '{{ .Input }}'
stdout '{{ .Output }}'
! stderr .
`

var cases = []data{
	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L292-L300
	{"ignore stability flag 1", "1.0@dev", "== 1.0.0.0"},
	{"ignore stability flag 2", ">=1.0@beta", ">= 1.0.0.0-beta"},
	{"ignore stability flag 3", "dev-load-varnish-only-when-used as ^2.0@dev", "== dev-load-varnish-only-when-used"},
	{"ignore stability flag 4", "dev-load-varnish-only-when-used@dev as ^2.0@dev", "== dev-load-varnish-only-when-used"},

	// Taken from https://github.com/composer/semver/blob/b52829022cb18210bb84e44e457bd4e890f8d2a7/tests/VersionParserTest.php#L302-L308
	{"ignores reference on dev version 1", "1.0.x-dev#abcd123", "== 1.0.9999999.9999999-dev"},
	{"ignores reference on dev version 2", "1.0.x-dev#trunk/@123", "== 1.0.9999999.9999999-dev"},
}

var fileTemplate = template.Must(template.New("").Parse(fileTemplateRaw))

type data struct {
	name      string
	Input     string
	rawOutput string
}

func (d data) Name() string {
	return d.name
}

func (d data) Output() string {
	return regexp.QuoteMeta(d.rawOutput)
}

func (d data) Write(f *os.File) error {
	return fileTemplate.Execute(f, d)
}

func main() {
	err := internal.Generate("parse/success", cases...)
	if err != nil {
		panic(err)
	}
}
